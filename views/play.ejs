<div class="game-container">
  <div class="game-header">
    <h2><%= game.title %></h2>
    <button id="fullscreen-toggle" class="btn">Fullscreen</button>
  </div>

  <div class="game-wrapper">
    <div id="game-frame-container">
      <iframe
        id="game-frame"
        src="<%= game.gameUrl %>"
        allow="fullscreen; autoplay; clipboard-write; encrypted-media; picture-in-picture"
        sandbox="allow-same-origin allow-scripts allow-popups allow-forms"
        allowfullscreen
        frameborder="0"
      ></iframe>
    </div>

    <div id="game-chat-container">
      <div id="chat-header">
        <input
          type="text"
          id="username-input"
          placeholder="Wähle deinen Username..."
          class="retro-input"
        />
      </div>
      <div id="chat-messages"></div>
      <form id="chat-form" onsubmit="return false;">
        <div class="chat-input-container">
          <input
            type="text"
            id="chat-input"
            placeholder="Deine Nachricht..."
            autocomplete="off"
            class="retro-input"
          />
          <button type="submit" class="send-button">Send</button>
        </div>
      </form>
    </div>
  </div>
</div>

<style>
  .game-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }

  .game-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }

  .game-wrapper {
    display: flex;
    gap: 20px;
    height: 600px;
  }

  #game-frame-container {
    flex: 1;
    position: relative;
    background: #000;
    border: 2px solid #00ff00;
    border-radius: 5px;
  }

  #game-frame {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #000;
  }

  #game-chat-container {
    width: 300px;
    display: flex;
    flex-direction: column;
    background: rgba(0, 0, 0, 0.8);
    border: 2px solid #00ff00;
    border-radius: 5px;
  }

  #chat-header {
    padding: 10px;
    border-bottom: 1px solid #00ff00;
  }

  #chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 10px;
    color: #00ff00;
    font-family: "Press Start 2P", cursive;
    font-size: 10px;
  }

  #chat-form {
    padding: 10px;
    border-top: 1px solid #00ff00;
  }

  .retro-input {
    width: 100%;
    padding: 5px;
    background: black;
    color: #00ff00;
    border: 1px solid #00ff00;
    font-family: "Press Start 2P", cursive;
    font-size: 10px;
  }

  .message {
    margin-bottom: 5px;
  }

  .username {
    color: #ff00ff;
  }

  .timestamp {
    color: #666;
    font-size: 8px;
  }

  /* Vollbildmodus Styles */
  .fullscreen #game-frame-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 9999;
  }

  .fullscreen #game-chat-container {
    position: fixed;
    top: 20px;
    right: 20px;
    height: calc(100vh - 40px);
    z-index: 10000;
  }

  .fullscreen #fullscreen-toggle {
    position: fixed;
    top: 20px;
    left: 20px;
    z-index: 10000;
  }

  .chat-input-container {
    display: flex;
    gap: 10px;
  }

  .chat-input-container input {
    flex: 1;
  }

  .send-button {
    background: #00ff00;
    color: black;
    border: none;
    padding: 5px 10px;
    cursor: pointer;
    font-family: "Press Start 2P", cursive;
    font-size: 10px;
    border-radius: 3px;
  }

  .send-button:hover {
    background: #00cc00;
  }

  /* Zusätzliche Styles für Systembenachrichtigungen */
  .message.system {
    color: #999;
    font-style: italic;
    font-size: 8px;
  }

  .message.error {
    color: #ff0000;
    font-style: italic;
    font-size: 8px;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", async () => {
    const gameId = window.location.pathname.split("/")[2];
    const isVercel = window.location.hostname.includes("vercel.app");
    const chatMessages = document.getElementById("chat-messages");
    const chatForm = document.getElementById("chat-form");
    const chatInput = document.getElementById("chat-input");
    const usernameInput = document.getElementById("username-input");
    const fullscreenToggle = document.getElementById("fullscreen-toggle");
    const gameContainer = document.querySelector(".game-container");

    // Statusmeldung anzeigen
    function addStatusMessage(message, isError = false) {
      try {
        const statusEl = document.createElement("div");
        statusEl.className = `message ${isError ? "error" : "system"}`;
        statusEl.textContent = message;
        chatMessages.appendChild(statusEl);
        chatMessages.scrollTop = chatMessages.scrollHeight;
      } catch (err) {
        console.error("Fehler beim Anzeigen der Statusmeldung:", err);
      }
    }

    // Temp-Statusnachricht anzeigen (verschwindet nach timeout)
    function showTempStatus(message, isError = false, timeout = 5000) {
      const statusEl = document.createElement("div");
      statusEl.className = `message ${isError ? "error" : "system"}`;
      statusEl.textContent = message;
      chatMessages.appendChild(statusEl);
      chatMessages.scrollTop = chatMessages.scrollHeight;

      setTimeout(() => {
        try {
          statusEl.remove();
        } catch (e) {}
      }, timeout);
    }

    // Message zur Anzeige hinzufügen
    function addMessageToChat(msg) {
      if (!msg || !msg.text) return;

      const div = document.createElement("div");
      div.className = "message";
      const time = new Date(msg.timestamp).toLocaleTimeString();
      div.innerHTML = `
        <span class="timestamp">[${time}]</span>
        <span class="username">${msg.username || "Anonym"}:</span>
        ${msg.text}
      `;
      chatMessages.appendChild(div);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Chat-System initialisieren
    const initChat = () => {
      console.log("Initialisiere Chat für Spiel:", gameId);
      console.log("Umgebung:", isVercel ? "Vercel" : "Lokal");

      // Lade bestehende Nachrichten
      loadMessages();

      // Polling für neue Nachrichten starten, wenn wir auf Vercel sind
      if (isVercel) {
        addStatusMessage("Chat-System gestartet (HTTP-Polling Modus)");
        startMessagePolling();
      } else {
        // Für lokale Entwicklung verwenden wir weiterhin Socket.IO
        initSocketIO();
      }
    };

    // Nachrichten über Standard-HTTP-Fetch laden
    async function loadMessages() {
      try {
        addStatusMessage("Lade vorherige Nachrichten...");
        const response = await fetch(`/api/messages/${gameId}`);

        if (!response.ok) {
          throw new Error(`HTTP Fehler ${response.status}`);
        }

        const messages = await response.json();
        console.log("Vorherige Nachrichten geladen:", messages.length);

        chatMessages.innerHTML = "";

        if (messages.length === 0) {
          addStatusMessage("Keine vorherigen Nachrichten");
          return;
        }

        messages.forEach((msg) => addMessageToChat(msg));
        addStatusMessage("Nachrichten geladen");
      } catch (error) {
        console.error("Fehler beim Laden der Nachrichten:", error);
        addStatusMessage("Fehler beim Laden der Nachrichten", true);
      }
    }

    // Regelmäßiges Polling für neue Nachrichten (nur für Vercel)
    let lastMessageTimestamp = new Date().toISOString();
    let pollingInterval;

    function startMessagePolling() {
      // Alle 5 Sekunden nach neuen Nachrichten fragen
      pollingInterval = setInterval(async () => {
        try {
          const response = await fetch(
            `/api/messages/${gameId}/new?since=${encodeURIComponent(
              lastMessageTimestamp
            )}`
          );

          if (!response.ok) {
            throw new Error(`HTTP Fehler ${response.status}`);
          }

          const newMessages = await response.json();

          if (newMessages.length > 0) {
            console.log("Neue Nachrichten erhalten:", newMessages.length);
            newMessages.forEach((msg) => addMessageToChat(msg));

            // Aktualisiere Zeitstempel für die nächste Abfrage
            if (newMessages.length > 0) {
              lastMessageTimestamp = new Date().toISOString();
            }
          }
        } catch (error) {
          console.error("Fehler beim Polling:", error);
        }
      }, 5000);
    }

    // Nachricht senden (HTTP POST)
    async function sendMessageHttp(text) {
      if (!text.trim()) return;

      showTempStatus("Sende Nachricht...");

      try {
        const username = usernameInput.value.trim() || "Anonym";

        const response = await fetch(`/api/messages/${gameId}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            text: text.trim(),
            username: username,
          }),
        });

        if (!response.ok) {
          throw new Error(`HTTP Fehler ${response.status}`);
        }

        const result = await response.json();

        if (result.success) {
          showTempStatus("Nachricht gesendet!");
          // Nach dem Senden sofort neue Nachrichten laden
          await loadMessages();
        } else {
          showTempStatus(
            "Fehler: " + (result.error || "Unbekannter Fehler"),
            true
          );
        }
      } catch (error) {
        console.error("Fehler beim Senden der Nachricht:", error);
        showTempStatus("Fehler beim Senden", true);
      }
    }

    // Socket.IO für lokale Entwicklung
    let socket;

    async function initSocketIO() {
      try {
        addStatusMessage("Verbindung wird hergestellt (Socket.IO)...");

        socket = io({
          transports: ["websocket", "polling"],
        });

        socket.on("connect", () => {
          console.log("Socket verbunden:", socket.id);
          addStatusMessage("Verbindung hergestellt");
          socket.emit("join game", gameId);
        });

        socket.on("connect_error", (error) => {
          console.error("Socket Verbindungsfehler:", error);
          addStatusMessage(`Verbindungsfehler: ${error.message}`, true);
        });

        socket.on("previous messages", (messages) => {
          console.log("Nachrichten geladen:", messages?.length || 0);

          chatMessages.innerHTML = "";

          if (!Array.isArray(messages) || messages.length === 0) {
            addStatusMessage("Keine vorherigen Nachrichten");
            return;
          }

          messages.forEach((msg) => addMessageToChat(msg));
        });

        socket.on("chat message", (msg) => {
          console.log("Neue Nachricht erhalten:", msg);
          addMessageToChat(msg);
        });

        socket.on("error", (error) => {
          console.error("Socket Fehler:", error);
          addStatusMessage(`Fehler: ${error}`, true);
        });

        socket.on("disconnect", () => {
          console.log("Socket getrennt");
          addStatusMessage("Verbindung getrennt", true);
        });
      } catch (error) {
        console.error("Socket.IO Initialisierungsfehler:", error);
        addStatusMessage(`Initialisierungsfehler: ${error.message}`, true);
      }
    }

    // Nachrichtenversand-Funktion
    const sendMessage = () => {
      const text = chatInput.value.trim();
      if (!text) return;

      console.log("Sende Nachricht:", text);

      if (isVercel) {
        // HTTP-basierte Nachrichtenübermittlung für Vercel
        sendMessageHttp(text);
      } else if (socket && socket.connected) {
        // Socket.IO für lokale Entwicklung
        socket.emit("chat message", { gameId, msg: text }, (ack) => {
          if (ack && ack.success) {
            showTempStatus("Gesendet!");
          } else if (ack && ack.error) {
            showTempStatus(`Fehler: ${ack.error}`, true);
          }
        });
      } else {
        showTempStatus("Nicht verbunden!", true);
      }

      chatInput.value = "";
      chatInput.focus();
    };

    // Event-Listener für die Chat-Formulare
    chatForm.addEventListener("submit", (e) => {
      e.preventDefault();
      e.stopPropagation();
      sendMessage();
      return false;
    });

    document.querySelector(".send-button").addEventListener("click", (e) => {
      e.preventDefault();
      e.stopPropagation();
      sendMessage();
      return false;
    });

    chatInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        e.stopPropagation();
        sendMessage();
      }
    });

    // Username-Handling
    const savedUsername = localStorage.getItem("chatUsername");
    if (savedUsername) {
      usernameInput.value = savedUsername;
    }

    usernameInput.addEventListener("change", () => {
      const username = usernameInput.value.trim();
      if (username) {
        localStorage.setItem("chatUsername", username);

        if (!isVercel && socket && socket.connected) {
          socket.emit("set username", username);
        }
      }
    });

    // Fullscreen-Toggle
    fullscreenToggle.addEventListener("click", () => {
      gameContainer.classList.toggle("fullscreen");
      fullscreenToggle.textContent = gameContainer.classList.contains(
        "fullscreen"
      )
        ? "Normal size"
        : "Fullscreen";
    });

    // Chat initialisieren
    initChat();
  });
</script>
