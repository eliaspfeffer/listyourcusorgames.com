<div class="game-container">
  <div class="game-header">
    <h2><%= game.title %></h2>
    <button id="fullscreen-toggle" class="btn">Vollbild</button>
  </div>

  <div class="game-wrapper">
    <div id="game-frame-container">
      <iframe
        id="game-frame"
        src="<%= game.gameUrl %>"
        allow="fullscreen"
        allowfullscreen
        frameborder="0"
      ></iframe>
    </div>

    <div id="game-chat-container">
      <div id="chat-header">
        <input
          type="text"
          id="username-input"
          placeholder="Wähle deinen Username..."
          class="retro-input"
        />
      </div>
      <div id="chat-messages"></div>
      <form id="chat-form">
        <input
          type="text"
          id="chat-input"
          placeholder="Deine Nachricht..."
          autocomplete="off"
          class="retro-input"
        />
      </form>
    </div>
  </div>
</div>

<style>
  .game-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }

  .game-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }

  .game-wrapper {
    display: flex;
    gap: 20px;
    height: 600px;
  }

  #game-frame-container {
    flex: 1;
    position: relative;
    background: #000;
    border: 2px solid #00ff00;
    border-radius: 5px;
  }

  #game-frame {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #000;
  }

  #game-chat-container {
    width: 300px;
    display: flex;
    flex-direction: column;
    background: rgba(0, 0, 0, 0.8);
    border: 2px solid #00ff00;
    border-radius: 5px;
  }

  #chat-header {
    padding: 10px;
    border-bottom: 1px solid #00ff00;
  }

  #chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 10px;
    color: #00ff00;
    font-family: "Press Start 2P", cursive;
    font-size: 10px;
  }

  #chat-form {
    padding: 10px;
    border-top: 1px solid #00ff00;
  }

  .retro-input {
    width: 100%;
    padding: 5px;
    background: black;
    color: #00ff00;
    border: 1px solid #00ff00;
    font-family: "Press Start 2P", cursive;
    font-size: 10px;
  }

  .message {
    margin-bottom: 5px;
  }

  .username {
    color: #ff00ff;
  }

  .timestamp {
    color: #666;
    font-size: 8px;
  }

  /* Vollbildmodus Styles */
  .fullscreen #game-frame-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 9999;
  }

  .fullscreen #game-chat-container {
    position: fixed;
    top: 20px;
    right: 20px;
    height: calc(100vh - 40px);
    z-index: 10000;
  }

  .fullscreen #fullscreen-toggle {
    position: fixed;
    top: 20px;
    left: 20px;
    z-index: 10000;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", async () => {
    // Initialisiere Socket.IO
    let socket;

    // Prüfe, ob wir auf Vercel oder lokal sind
    const isVercel = window.location.hostname.includes("vercel.app");

    if (isVercel) {
      // Auf Vercel: Initialisiere Socket.IO über die API-Route
      await fetch("/api/socketio");
      socket = io();
    } else {
      // Lokal: Direkte Verbindung
      socket = io();
    }

    const chatForm = document.getElementById("chat-form");
    const chatInput = document.getElementById("chat-input");
    const chatMessages = document.getElementById("chat-messages");
    const usernameInput = document.getElementById("username-input");
    const fullscreenToggle = document.getElementById("fullscreen-toggle");
    const gameContainer = document.querySelector(".game-container");

    // Vollbildmodus
    fullscreenToggle.addEventListener("click", () => {
      gameContainer.classList.toggle("fullscreen");
      if (gameContainer.classList.contains("fullscreen")) {
        fullscreenToggle.textContent = "Normalgröße";
      } else {
        fullscreenToggle.textContent = "Vollbild";
      }
    });

    // Username setzen
    usernameInput.addEventListener("change", () => {
      const username = usernameInput.value.trim();
      if (username) {
        socket.emit("set username", username);
      }
    });

    // Chat-Nachricht senden
    chatForm.addEventListener("submit", (e) => {
      e.preventDefault();
      const msg = chatInput.value.trim();
      if (msg) {
        socket.emit("chat message", msg);
        chatInput.value = "";
      }
    });

    // Empfangene Nachrichten anzeigen
    socket.on("chat message", (msg) => {
      const div = document.createElement("div");
      div.className = "message";
      const time = new Date(msg.timestamp).toLocaleTimeString();
      div.innerHTML = `
        <span class="timestamp">[${time}]</span>
        <span class="username">${msg.username}:</span>
        ${msg.text}
      `;
      chatMessages.appendChild(div);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    });

    // Vorherige Nachrichten laden
    socket.on("previous messages", (messages) => {
      chatMessages.innerHTML = "";
      messages.forEach((msg) => {
        const div = document.createElement("div");
        div.className = "message";
        const time = new Date(msg.timestamp).toLocaleTimeString();
        div.innerHTML = `
          <span class="timestamp">[${time}]</span>
          <span class="username">${msg.username}:</span>
          ${msg.text}
        `;
        chatMessages.appendChild(div);
      });
      chatMessages.scrollTop = chatMessages.scrollHeight;
    });
  });
</script>
