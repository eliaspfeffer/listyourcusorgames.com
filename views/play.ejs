<div class="game-container">
  <div class="game-header">
    <h2><%= game.title %></h2>
    <button id="fullscreen-toggle" class="btn">Fullscreen</button>
  </div>

  <div class="game-wrapper">
    <div id="game-frame-container">
      <iframe
        id="game-frame"
        src="<%= game.gameUrl %>"
        allow="fullscreen; autoplay; clipboard-write; encrypted-media; picture-in-picture"
        sandbox="allow-same-origin allow-scripts allow-popups allow-forms"
        allowfullscreen
        frameborder="0"
      ></iframe>
    </div>

    <div id="game-chat-container">
      <div id="chat-header">
        <input
          type="text"
          id="username-input"
          placeholder="Wähle deinen Username..."
          class="retro-input"
        />
      </div>
      <div id="chat-messages"></div>
      <form id="chat-form" onsubmit="return false;">
        <div class="chat-input-container">
          <input
            type="text"
            id="chat-input"
            placeholder="Deine Nachricht..."
            autocomplete="off"
            class="retro-input"
          />
          <button type="submit" class="send-button">Send</button>
        </div>
      </form>
    </div>
  </div>
</div>

<style>
  .game-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }

  .game-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }

  .game-wrapper {
    display: flex;
    gap: 20px;
    height: 600px;
  }

  #game-frame-container {
    flex: 1;
    position: relative;
    background: #000;
    border: 2px solid #00ff00;
    border-radius: 5px;
  }

  #game-frame {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #000;
  }

  #game-chat-container {
    width: 300px;
    display: flex;
    flex-direction: column;
    background: rgba(0, 0, 0, 0.8);
    border: 2px solid #00ff00;
    border-radius: 5px;
  }

  #chat-header {
    padding: 10px;
    border-bottom: 1px solid #00ff00;
  }

  #chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 10px;
    color: #00ff00;
    font-family: "Press Start 2P", cursive;
    font-size: 10px;
  }

  #chat-form {
    padding: 10px;
    border-top: 1px solid #00ff00;
  }

  .retro-input {
    width: 100%;
    padding: 5px;
    background: black;
    color: #00ff00;
    border: 1px solid #00ff00;
    font-family: "Press Start 2P", cursive;
    font-size: 10px;
  }

  .message {
    margin-bottom: 5px;
  }

  .username {
    color: #ff00ff;
  }

  .timestamp {
    color: #666;
    font-size: 8px;
  }

  /* Vollbildmodus Styles */
  .fullscreen #game-frame-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 9999;
  }

  .fullscreen #game-chat-container {
    position: fixed;
    top: 20px;
    right: 20px;
    height: calc(100vh - 40px);
    z-index: 10000;
  }

  .fullscreen #fullscreen-toggle {
    position: fixed;
    top: 20px;
    left: 20px;
    z-index: 10000;
  }

  .chat-input-container {
    display: flex;
    gap: 10px;
  }

  .chat-input-container input {
    flex: 1;
  }

  .send-button {
    background: #00ff00;
    color: black;
    border: none;
    padding: 5px 10px;
    cursor: pointer;
    font-family: "Press Start 2P", cursive;
    font-size: 10px;
    border-radius: 3px;
  }

  .send-button:hover {
    background: #00cc00;
  }

  /* Zusätzliche Styles für Systembenachrichtigungen */
  .message.system {
    color: #999;
    font-style: italic;
    font-size: 8px;
  }

  .message.error {
    color: #ff0000;
    font-style: italic;
    font-size: 8px;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", async () => {
    let socket;
    const gameId = window.location.pathname.split("/")[2];
    const isVercel = window.location.hostname.includes("vercel.app");

    console.log("Chat initialisiert für Spiel:", gameId);
    console.log("Umgebung:", isVercel ? "Vercel" : "Lokal");

    try {
      if (isVercel) {
        // Für Vercel-Deployment
        console.log("Initialisiere Socket.IO für Vercel...");

        // Wir versuchen es mit einem direkten Fetch auf die API, um sicherzustellen, dass sie aktiv ist
        try {
          const response = await fetch("/api/socketio", { method: "GET" });
          const text = await response.text();
          console.log("API-Antwort:", text);
        } catch (error) {
          console.error("API-Aufruf fehlgeschlagen:", error);
        }

        // Warten vor dem Verbindungsversuch
        await new Promise((resolve) => setTimeout(resolve, 500));

        // Vercel-spezifische Socket.IO-Konfiguration
        socket = io({
          path: "/api/socketio",
          addTrailingSlash: false,
          transports: ["polling", "websocket"], // Polling zuerst für Vercel
          reconnectionAttempts: 10,
          reconnectionDelay: 1000,
          timeout: 20000,
          forceNew: true,
        });
      } else {
        // Für lokale Entwicklung
        console.log("Initialisiere Socket.IO lokal...");
        socket = io({
          transports: ["websocket", "polling"],
        });
      }

      // Debug logging - mehr Details hinzugefügt
      socket.on("connect", () => {
        console.log("Socket verbunden:", socket.id);
        console.log(
          "Socket Transportmethode:",
          socket.io.engine.transport.name
        );
        console.log("Socket URL:", socket.io.uri);
        socket.emit("join game", gameId);
        document.getElementById("chat-messages").innerHTML +=
          '<div class="message system">Verbindung hergestellt</div>';
      });

      socket.on("connect_error", (error) => {
        console.error("Socket Verbindungsfehler:", error);
        document.getElementById(
          "chat-messages"
        ).innerHTML += `<div class="message error">Verbindungsfehler: ${error.message}</div>`;
      });

      socket.on("error", (error) => {
        console.error("Socket Fehler:", error);
      });

      socket.on("reconnect", (attemptNumber) => {
        console.log("Socket wiederverbunden nach Versuch:", attemptNumber);
        socket.emit("join game", gameId);
        document.getElementById("chat-messages").innerHTML +=
          '<div class="message system">Wiederverbunden</div>';
      });

      socket.on("reconnect_error", (error) => {
        console.error("Socket Wiederverbindungsfehler:", error);
      });

      socket.on("reconnect_failed", () => {
        console.error("Socket Wiederverbindung fehlgeschlagen");
        document.getElementById("chat-messages").innerHTML +=
          '<div class="message error">Wiederverbindung fehlgeschlagen - Bitte Seite neu laden</div>';
      });

      const chatForm = document.getElementById("chat-form");
      const chatInput = document.getElementById("chat-input");
      const chatMessages = document.getElementById("chat-messages");
      const usernameInput = document.getElementById("username-input");
      const fullscreenToggle = document.getElementById("fullscreen-toggle");
      const gameContainer = document.querySelector(".game-container");

      // Sendestatus Anzeige
      const showSendStatus = (message, isError = false) => {
        const statusEl = document.createElement("div");
        statusEl.className = `message ${isError ? "error" : "system"}`;
        statusEl.textContent = message;
        chatMessages.appendChild(statusEl);
        chatMessages.scrollTop = chatMessages.scrollHeight;

        // Automatisch entfernen nach 5 Sekunden
        setTimeout(() => {
          statusEl.remove();
        }, 5000);
      };

      // Send message function - verbessert
      const sendMessage = () => {
        const msg = chatInput.value.trim();
        if (!msg) return;

        if (!socket.connected) {
          showSendStatus(
            "Nicht verbunden! Nachricht kann nicht gesendet werden.",
            true
          );
          return;
        }

        console.log("Sende Nachricht:", { gameId, msg });
        showSendStatus("Sende...");

        // Timeout für die Nachrichtenzustellung
        const messageTimeout = setTimeout(() => {
          showSendStatus("Senden dauert länger als erwartet...");
        }, 3000);

        socket.emit("chat message", { gameId, msg }, (ack) => {
          clearTimeout(messageTimeout);
          if (ack && ack.success) {
            showSendStatus("Gesendet!");
          } else if (ack && ack.error) {
            showSendStatus(`Fehler: ${ack.error}`, true);
          }
        });

        chatInput.value = "";
        chatInput.focus();
      };

      // Form submit handler - stark verbessert
      chatForm.addEventListener("submit", (e) => {
        console.log("Form-Submission erkannt");
        e.preventDefault();
        e.stopPropagation();
        sendMessage();
        return false;
      });

      // Expliziter Send-Button-Handler hinzufügen
      document.querySelector(".send-button").addEventListener("click", (e) => {
        console.log("Send-Button geklickt");
        e.preventDefault();
        e.stopPropagation();
        sendMessage();
        return false;
      });

      // Enter key handler
      chatInput.addEventListener("keypress", (e) => {
        if (e.key === "Enter") {
          e.preventDefault();
          e.stopPropagation();
          sendMessage();
        }
      });

      // Username handling
      const setUsername = (username) => {
        if (username && username.trim()) {
          console.log("Setting username:", username.trim());
          socket.emit("set username", username.trim());
          localStorage.setItem("chatUsername", username.trim());
        }
      };

      usernameInput.addEventListener("change", () => {
        setUsername(usernameInput.value);
      });

      usernameInput.addEventListener("blur", () => {
        setUsername(usernameInput.value);
      });

      const savedUsername = localStorage.getItem("chatUsername");
      if (savedUsername) {
        usernameInput.value = savedUsername;
        setUsername(savedUsername);
      }

      // Fullscreen toggle
      fullscreenToggle.addEventListener("click", () => {
        gameContainer.classList.toggle("fullscreen");
        fullscreenToggle.textContent = gameContainer.classList.contains(
          "fullscreen"
        )
          ? "Normal size"
          : "Fullscreen";
      });

      // Handle incoming messages - verbessert mit Fehlerbehandlung
      socket.on("chat message", (msg) => {
        console.log("Nachricht erhalten:", msg);
        try {
          if (!msg || !msg.text) {
            console.error("Ungültige Nachricht erhalten:", msg);
            return;
          }

          const div = document.createElement("div");
          div.className = "message";
          const time = new Date(msg.timestamp).toLocaleTimeString();
          div.innerHTML = `
            <span class="timestamp">[${time}]</span>
            <span class="username">${msg.username || "Anonym"}:</span>
            ${msg.text}
          `;
          chatMessages.appendChild(div);
          chatMessages.scrollTop = chatMessages.scrollHeight;
        } catch (error) {
          console.error("Fehler beim Anzeigen der Nachricht:", error);
        }
      });

      // Handle previous messages - verbessert
      socket.on("previous messages", (messages) => {
        console.log("Vorherige Nachrichten geladen:", messages?.length || 0);
        try {
          if (!Array.isArray(messages)) {
            console.error("Ungültiges Nachrichtenformat erhalten:", messages);
            return;
          }

          chatMessages.innerHTML = "";

          if (messages.length === 0) {
            const div = document.createElement("div");
            div.className = "message system";
            div.textContent = "Keine vorherigen Nachrichten";
            chatMessages.appendChild(div);
            return;
          }

          messages.forEach((msg) => {
            if (!msg || !msg.text) return;

            const div = document.createElement("div");
            div.className = "message";
            const time = new Date(msg.timestamp).toLocaleTimeString();
            div.innerHTML = `
              <span class="timestamp">[${time}]</span>
              <span class="username">${msg.username || "Anonym"}:</span>
              ${msg.text}
            `;
            chatMessages.appendChild(div);
          });
          chatMessages.scrollTop = chatMessages.scrollHeight;
        } catch (error) {
          console.error("Fehler beim Anzeigen vorheriger Nachrichten:", error);
        }
      });
    } catch (error) {
      console.error("Socket.IO Initialisierungsfehler:", error);
      document.getElementById(
        "chat-messages"
      ).innerHTML += `<div class="message error">Initialisierungsfehler: ${error.message}</div>`;
    }
  });
</script>
